The folder should be either two levels deep inside contiki-2.7 folder, or you should change the relative path to contiki in the Makefile.

/*
 * Copyright (c) 2015, Computer Science Department (CSD), University of Crete, and 
 * Signal Processing Lab (SPL), Institute of Computer Science (ICS), FORTH, Greece.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of CSD, SPL/ICS-FORTH nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE INSTITUTE AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE INSTITUTE OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 * 
 */

/**
 * \file
 *  README Files for the implementation of Local Minimum spanning Tree for topology control in contiki. The implementation is based at the
 *  description given at: N. Li, J. Hou, and L. Sha, “Design and analysis of an mst-based topology control algorithm,” Wireless Communications, IEEE Transactions on, vol. 4, no. 3, pp. 1195–1206, May 2005.
 *
 *
 *
 * \author
 *      Phivos Phivou <fivou@csd.uoc.gr>, Nancy Panousopoulou - <apanouso@ics.forth.gr>
*/

-------------------------------------------------
FOLDER CONTENTS
------------------------------------------------
In this folder you'll find everything conserning the implementation of the LMST algorithm.
	definitions.h	- Definitions file for the Delaunay module in C
	definitions.c	- Implementation of the Delaunay module in C
	firmware.c	- Implementation of the motes firmware and the LMST algorithm in C
	simtest.h	- Bash shell script that generates simulation files out of data sets and executes the simulations in a no-gui mode of Cooja
	errorlist.txt	- Contains error messages for searching the outputs of each simulation and find out which one ended with errors
	Makefile	- Contiki project makefile to compile the firmware
	scenario.js	- The simulations scenario for the cooja-contiki interaction (get 2D coordinates from cooja and convey them to the emulated motes, and write the printf messages to log files).
	project-conf.h	- Configuration header file for the employed protocol stack
	simgen_rtx	- The executable for generating a simulation from a dataset with nodes locations
	
Files are generated by Cooja, after the simulation:
	<>.csc	- The simulation xml that contains all sort of information about the simulation
	<>.mlog	- The motes log, everything a mote prints is stored here


------------------------------------
ENVIRONMENT
------------------------------------
This code has been created and tested at Contiki-2.7/Cooja environment (Instant Contiki and native Contiki/Ubuntu 14.04), using Z1 platform.

------------------------------------
HOW TO EXECUTE
------------------------------------
1. Download and extract the contents of the LMST folder at $Contiki/examples/LMST folder, where $Contiki is your contiki main folder. Make sure that you have read/write access to that path.

2. You have three alternatives for running this code, namely: (a) automated execution at cooja (no-gui mode) for a batch of network scenaria (with nodes at predefined locations),(b) automated generation of a cooja emulation scipt and manual execution at cooja (gui / no-gui), (c) manual compile of firmware for emulation at cooja. Specifically:

(a) Automated execution at cooja (no-gui mode) for a batch of network scenaria (with nodes at predefined locations):
	--Go to the working folder $Contiki/examples/LMST
	--Copy into $Contiki/examples/LMST/deployments folder your .dat files with the locations of the nodes per emulated scenario. The format should be <node id>, <x coordinate>,<y coordinate>. See fixedBoundaries_deployment14.dat for an example.
	--Edit line 20 the simtest.sh file to show the absolute path for cooja's jar file and contiki's root folder. For instance, in my case the absolute path for cooja.jar is: ~/development/contiki-2.7-seed2/tools/cooja/dist/cooja.jar, and contiki's main path ../../../contiki-2.7-seed2
	--Save and close simtest.sh
	--Open a command terminal and go to $Contiki/examples/LMST, and type ./simtest.sh
	--When all *.dat files are parsed, the .csc and mlog files are found under $Contiki/examples/LMST/deployments/ folder

(b) Automated generation of a cooja emulation scipt and manual execution at cooja (gui / no-gui):
	--Go to the working folder $Contiki/examples/LMST
	--Open a command terminal and run simgen_rtx, giving as input arguments the name of the cooja script, the name of the file with the nodes locations, and the mote type, e.g.: ./simgen_rtx testcooja locations.dat z1
        --The testcooja.csc will be generated at your working folder, so then you can run it through cooja.

(c) Manual compile of firmware for emulation at cooja:
	--Open Cooja and create a new simulation.
	--Create a z1 mote type using firmware.c as the source code. Create as many nodes as you want at either random of fixed locations (using cooja's user interface).
	--Go to Tools/Simulation Script Editor, link scenario.js to the script editor, and activate the script.
	--Run the simulation from the simulation control panel.


------------------------------------------------------
KNOWN ISSUES
------------------------------------------------------
1. The naming of the working folder for the automated code execution is absolute, so you should use the same naming as the one provided.
